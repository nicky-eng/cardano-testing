{"version":3,"sources":["webpack:///src/app/stores.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/http-request-interceptor.ts","webpack:///src/app/loading.service.ts","webpack:///src/app/store-box/store-box.component.ts","webpack:///src/app/store-box/store-box.component.html","webpack:///src/app/store-list/store-list.component.ts","webpack:///src/app/store-list/store-list.component.html","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["StoresService","http","storeList","storesUrl","get","toPromise","then","data","item","push","environment","production","AppComponent","storesService","title","getStores","AppModule","provide","useClass","multi","HttpRequestInterceptor","_loading","request","next","setLoading","url","handle","pipe","err","evt","LoadingService","loadingSub","loadingMap","Map","loading","Error","set","has","size","StoreBoxComponent","faMapMarkerAlt","StoreListComponent","listenToLoading","subscribe","bootstrapModule","console","error","webpackEmptyAsyncContext","req","Promise","resolve","e","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Store } from './store'\nimport stores from './stores.json';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StoresService {\n\n  // GoogleMap pin works\n  // private storeList: Store[] = stores;\n\n  // getStores(): Store[] {\n  //   return this.storeList;\n  // }\n\n\n  private storeList: Store[] = [];\n\n  private storesUrl = 'https://testing-cardano-back.herokuapp.com/stores/?format=json';\n  getStores(): Store[] {\n    this.http.get(this.storesUrl).toPromise()\n      .then(data => {\n\n        for (let item in data) {\n          this.storeList.push(data[item]);\n        }\n      });\n    return this.storeList\n  }\n\n  constructor(\n    private http: HttpClient) { }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\nimport { Store } from './store';\nimport { StoresService } from './stores.service';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n\n  storeList: Store[] = [];\n\n  getStores(): void {\n    this.storeList = this.storesService.getStores();\n  }\n\n  title = 'Ada and Friends - Business Directory';\n\n  constructor(private storesService: StoresService) { }\n\n\n}\n\n","<app-store-list></app-store-list>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { StoreBoxComponent } from './store-box/store-box.component';\nimport { StoreListComponent } from './store-list/store-list.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { HttpRequestInterceptor } from './http-request-interceptor';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    StoreBoxComponent,\n    StoreListComponent\n  ],\n  imports: [\n    HttpClientModule,\n    BrowserModule,\n    FontAwesomeModule,\n  ],\n  providers: [{ provide: HTTP_INTERCEPTORS, useClass: HttpRequestInterceptor, multi: true }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {\n    HttpRequest,\n    HttpHandler,\n    HttpEvent,\n    HttpInterceptor, HttpResponse\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators'\nimport { LoadingService } from './loading.service';\n\n/**\n * This class is for intercepting http requests. When a request starts, we set the loadingSub property\n * in the LoadingService to true. Once the request completes and we have a response, set the loadingSub\n * property to false. If an error occurs while servicing the request, set the loadingSub property to false.\n * @class {HttpRequestInterceptor}\n */\n@Injectable()\nexport class HttpRequestInterceptor implements HttpInterceptor {\n\n    constructor(\n        private _loading: LoadingService\n    ) { }\n\n    intercept(request: HttpRequest<any>, next: HttpHandler):\n        Observable<HttpEvent<any>> {\n        this._loading.setLoading(true, request.url);\n        return next.handle(request)\n            .pipe(catchError((err) => {\n                this._loading.setLoading(false, request.url);\n                return err;\n            }))\n            .pipe(map<HttpEvent<any>, any>((evt: HttpEvent<any>) => {\n                if (evt instanceof HttpResponse) {\n                    this._loading.setLoading(false, request.url);\n                }\n                return evt;\n            }));\n    }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoadingService {\n  loadingSub: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  /**\n   * Contains in-progress loading requests\n   */\n  loadingMap: Map<string, boolean> = new Map<string, boolean>();\n\n  constructor() { }\n\n  /**\n   * Sets the loadingSub property value based on the following:\n   * - If loading is true, add the provided url to the loadingMap with a true value, set loadingSub value to true\n   * - If loading is false, remove the loadingMap entry and only when the map is empty will we set loadingSub to false\n   * This pattern ensures if there are multiple requests awaiting completion, we don't set loading to false before\n   * other requests have completed. At the moment, this function is only called from the @link{HttpRequestInterceptor}\n   * @param loading {boolean}\n   * @param url {string}\n   */\n  setLoading(loading: boolean, url: string): void {\n    if (!url) {\n      throw new Error('The request URL must be provided to the LoadingService.setLoading function');\n    }\n    if (loading === true) {\n      this.loadingMap.set(url, loading);\n      this.loadingSub.next(true);\n    } else if (loading === false && this.loadingMap.has(url)) {\n      this.loadingMap.delete(url);\n    }\n    if (this.loadingMap.size === 0) {\n      this.loadingSub.next(false);\n    }\n  }\n}","import { Component, OnInit, OnChanges } from '@angular/core';\nimport { Input } from '@angular/core';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport { Store } from '../store';\n\n@Component({\n  selector: 'app-store-box',\n  templateUrl: './store-box.component.html',\n  styleUrls: ['./store-box.component.css']\n})\nexport class StoreBoxComponent implements OnChanges {\n  faMapMarkerAlt = faMapMarkerAlt;\n  @Input() store!: Store;\n\n  @Input() index!: number;\n\n  constructor() { }\n\n  ngOnChanges() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div *ngIf=\"index%3 === 0\" class=\"clearfix visible-md-block visible-lg-block\"></div>\n<div *ngIf=\"index%2 === 0\" class=\"clearfix visible-sm-block\"></div>\n<div class=\" col-md-4 col-sm-6\">\n    <div class=\"single-explore-item\">\n        <div class=\"single-explore-img\">\n            <img src=\"{{ store.picture }}\" alt=\"shop image\">            \n        </div>\n        <div class=\"single-explore-txt bg-theme-1\">\n            <div class=\"explore-person\"> <!--Gray division line -->\n            <h2><a href=\"{{ store.website }}\" target=\"_blank\" rel=\"noopener noreferrer\"> {{ store.name }} </a></h2>\n                 <div class=\"row\">\n                    <div class=\"col-sm-10\">\n                        <div class=\"explore-rating-price\">\n                            <a href=\"{{ store.googlemaps_link }}\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                <p *ngIf=\"store.state; else elseBlock\">{{ store.address }}, {{ store.state}}</p>\n                                <ng-template #elseBlock>{{ store.address }}</ng-template></a>\n                            <br>\n                            <a href=\"{{ store.googlemaps_link }}\" target=\"_blank\" rel=\"noopener noreferrer\">{{ store.country['name'] }}</a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"explore-open-close-part\">\n                <div class=\"row\">\n                    <div class=\"col-xs-5\">\n                        <a href=\"{{ store.website }}\" target=\"_blank\" rel=\"noreferrer noopener\">\n                        <button class=\"close-btn open-btn\">open website</button>\n                        </a>\n                    </div>                  \n                    <div class=\"col-xs-7\">\n                        <div class=\"explore-map-icon\">\n                            <a href=\"{{ store.googlemaps_link }}\" target=\"_blank\" rel=\"noopener noreferrer\"><fa-icon [icon]=\"faMapMarkerAlt\"></fa-icon></a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { delay } from 'rxjs/operators';\n\nimport { Store } from '../store';\nimport { StoresService } from '../stores.service';\nimport { LoadingService } from '../loading.service';\n\n@Component({\n  selector: 'app-store-list',\n  templateUrl: './store-list.component.html',\n  styleUrls: ['./store-list.component.css']\n})\nexport class StoreListComponent implements OnInit {\n\n  loading: boolean = false;\n\n  storeList: Store[] = [];\n\n  getStores(): void {\n    this.storeList = this.storesService.getStores();\n  }\n\n\n  constructor(private _loading: LoadingService,\n    private storesService: StoresService) { }\n\n  ngOnInit() {\n    this.getStores();\n    this.listenToLoading();\n  }\n\n  listenToLoading(): void {\n    this._loading.loadingSub\n      .pipe(delay(0)) // This prevents a ExpressionChangedAfterItHasBeenCheckedError for subsequent requests\n      .subscribe((loading) => {\n        this.loading = loading;\n      });\n  }\n\n\n\n\n}\n","<div style=\"text-align:left\">\n\t\t<!--explore start -->\n\t\t<section id=\"explore\" class=\"explore\">\n\t\t\t<div class=\"container\">\n\t\t\t\t<div class=\"section-header\">\n\t\t\t\t\t<h2>find your store</h2>\n\t\t\t\t\t<p>Find stores and businesses that accept ADA coin, the Cardano Blockchain coin</p>\n\t\t\t\t\t<div *ngIf=\"loading\">\n    \t\t\t\t\t<div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n\t\t\t\t\t</div>\n\t\t\t\t</div><!--/.section-header-->\n\t\t\t\t<div class=\"explore-content\">\n\t\t\t\t\t<div class=\"row\">\n\n\t\t\t\t\t\t<app-store-box *ngFor=\"let item of storeList; let indexOfStore=index\" [store]=\"item\" \n\t\t\t\t\t\t[index]=\"indexOfStore\"></app-store-box>\t\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div><!--/.container-->\n\n\t\t</section><!--/.explore-->\n\t\t<!--explore end -->\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}